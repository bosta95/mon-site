const axios = require('axios');
require('dotenv').config();

// Configuration
const API_BASE_URL = 'http://localhost:3000'; // Modifier si n√©cessaire
const TEST_EMAIL = 'contact@iptvsmarterpros.com'; // Utilisez votre propre email pour tester

// Fonction de test pour le formulaire de contact
async function testContactForm() {
  console.log('\n=== TEST DU FORMULAIRE DE CONTACT ===');
  try {
    const response = await axios.post(`${API_BASE_URL}/api/contact`, {
      name: 'Test Utilisateur',
      email: TEST_EMAIL,
      subject: 'Test du formulaire de contact',
      message: 'Ceci est un message de test pour v√©rifier que les emails du formulaire de contact fonctionnent correctement.'
    });
    
    console.log('‚úÖ Formulaire de contact - R√©ponse du serveur:', response.data);
    console.log('üìß V√©rifiez votre bo√Æte de r√©ception admin pour l\'email de contact.');
    return true;
  } catch (error) {
    console.error('‚ùå Erreur lors du test du formulaire de contact:');
    if (error.response) {
      // La requ√™te a √©t√© faite et le serveur a r√©pondu avec un code d'√©tat diff√©rent de 2xx
      console.error(`  Code d'erreur: ${error.response.status}`);
      console.error('  R√©ponse du serveur:', error.response.data);
    } else if (error.request) {
      // La requ√™te a √©t√© faite mais aucune r√©ponse n'a √©t√© re√ßue
      console.error('  Pas de r√©ponse du serveur. V√©rifiez que le serveur est en cours d\'ex√©cution.');
    } else {
      // Une erreur s'est produite lors de la configuration de la requ√™te
      console.error('  Erreur:', error.message);
    }
    return false;
  }
}

// Fonction de test pour la confirmation de commande
async function testOrderConfirmation() {
  console.log('\n=== TEST DE LA CONFIRMATION DE COMMANDE ===');
  
  // G√©n√©rer un num√©ro de commande unique
  const orderNumber = `TEST-${Date.now()}`;
  
  try {
    const response = await axios.post(`${API_BASE_URL}/api/order`, {
      email: TEST_EMAIL, // Utilisez le m√™me email pour tester
      product: '1_mois', // Utilise un produit valide d√©fini dans isValidProduct
      orderNumber: orderNumber
    });
    
    console.log('‚úÖ Confirmation de commande - R√©ponse du serveur:', response.data);
    console.log('üìß V√©rifiez:');
    console.log('   1. Votre bo√Æte de r√©ception admin pour l\'email de nouvelle commande');
    console.log('   2. La bo√Æte de r√©ception client pour la confirmation de commande');
    return true;
  } catch (error) {
    console.error('‚ùå Erreur lors du test de la confirmation de commande:');
    if (error.response) {
      console.error(`  Code d'erreur: ${error.response.status}`);
      console.error('  R√©ponse du serveur:', error.response.data);
    } else if (error.request) {
      console.error('  Pas de r√©ponse du serveur. V√©rifiez que le serveur est en cours d\'ex√©cution.');
    } else {
      console.error('  Erreur:', error.message);
    }
    return false;
  }
}

// Fonction principale qui ex√©cute tous les tests
async function runAllTests() {
  console.log('=== D√âMARRAGE DES TESTS D\'EMAILS ===');
  console.log(`Date et heure du test: ${new Date().toLocaleString()}`);
  console.log('Server URL:', API_BASE_URL);
  
  let contactResult, orderResult;
  
  try {
    contactResult = await testContactForm();
    // Attendre un peu entre les tests pour √©viter de surcharger le serveur SMTP
    await new Promise(resolve => setTimeout(resolve, 2000));
    orderResult = await testOrderConfirmation();
    
    console.log('\n=== R√âSUM√â DES TESTS ===');
    console.log(`Test du formulaire de contact: ${contactResult ? '‚úÖ R√âUSSI' : '‚ùå √âCHOU√â'}`);
    console.log(`Test de la confirmation de commande: ${orderResult ? '‚úÖ R√âUSSI' : '‚ùå √âCHOU√â'}`);
    
    if (contactResult && orderResult) {
      console.log('\n‚úÖ‚úÖ‚úÖ TOUS LES TESTS ONT R√âUSSI');
    } else {
      console.log('\n‚ö†Ô∏è CERTAINS TESTS ONT √âCHOU√â');
      console.log('V√©rifiez les logs ci-dessus pour plus de d√©tails.');
    }
  } catch (error) {
    console.error('\n‚ùå ERREUR INATTENDUE PENDANT LES TESTS:', error);
  }
}

// Ex√©cuter tous les tests
runAllTests(); 